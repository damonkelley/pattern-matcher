import re


class RegexFactory(object):
    """Generates a compiled regular expression object."""
    NODE_GROUP = '({0}|\*)'
    SEP = '/'

    def _generate_pattern(self, path):
        """Generates a regex pattern.

        Parameters:
            path: string

        A pattern is generated by converting each node in the path into
        a regular expression group that will match either the node text
        verbatim, or the wildcard.  All the regular expression groups
        are then formatted into a single string that will potentially
        match a group of patterns that are delimited by new line
        characters.
        """
        # Explode the path up into a list using the forward slash as a
        # delimiter. Filter out any empty strings.
        nodes = (node for node in path.split(self.SEP) if node)

        # Compose a list of regular expression groups for each node in
        # the path.
        patterns = (self.NODE_GROUP.format(re.escape(node)) for node in nodes)

        # Implode the list into a single regex pattern that will match
        # the path pattern format.
        return '^{0}$'.format(('\,').join(patterns))

    @classmethod
    def create(cls, path):
        """Create a regular expression object from a path.

        Parameters:
            path: string
        """
        rf = cls()
        pattern = rf._generate_pattern(path)
        return re.compile(pattern, re.ASCII | re.MULTILINE)
